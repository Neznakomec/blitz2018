import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.stream.Stream;

public class Solution {
	public static void main(String[] args) throws IOException {
		System.out.println(letterCombinations("23"));
		
	}
	
	static HashMap<Character, String> digitToLetters = new HashMap<>();
	static {
		digitToLetters.put('2', "abc");
		digitToLetters.put('3', "def");
		digitToLetters.put('4', "ghi");
		digitToLetters.put('5', "jkl");
		digitToLetters.put('6', "mno");
		digitToLetters.put('7', "pqrs");
		digitToLetters.put('8', "tuv");
		digitToLetters.put('9', "wxyz");
	}

	
	static char[] arr;
    public static List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0) {
        	return null;
        }
        
        arr = new char[digits.length()];
        List<String> list = new ArrayList<String>();
        recurse(list, digits, 0);
        
        return null;
    }
	private static void recurse(List<String> list, String digits, int index) {
		if (index >= arr.length) {
			String str = new String(arr);
			list.add(str);
			return;
		}
		
		char digit = digits.charAt(index);
		for (char c : digitToLetters.get(digit).toCharArray()) {
			arr[index] = c;
			recurse(list, digits, index + 1);
		}
		
	}
}